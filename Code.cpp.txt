#include<bits/stdc++.h>
//#include<iostream>
//#include<sstream>
using namespace std;

struct bigIntNode
{
	int data;
	struct bigIntNode *left,*right;
}*head1,*head2, *head3, *tail1,*tail2;

void addition();
void subtraction(int n1, int n2);
void deallocate();

int main()
{
    string str1, str2;
    cout<<"Enter a: ";
    cin>>str1;
    cout<<"Enter b: ";
    cin>>str2;
    
    int l1 = str1.length(); //No. of digits in Integer a
    cout<<"length1 = "<<l1<<"\n";
    int l2 = str2.length();	//No. of digits in Integer b
    cout<<"length2 = "<<l2<<"\n";
    
    int n1,n2;
	// calculation of no. of nodes 
    if(l1%9 == 0)
    	n1 = l1/9;
	else
		n1 = l1/9 + 1;
	
	if(l2%9 == 0)
		n2 = l2/9;
	else
    	n2 = l2/9 +1;
    
	cout<<"n1 = "<<n1<<"\nn2 = "<<n2<<"\n";
		
    //Extraction of digits from string-1 & forming list-1
    struct bigIntNode*temp1,*temp2,*temp;
    int low = l1-9, high = l1;
    int i=0,d;
    do
    {
    	if(low < 0)
    		low = 0;
    	string s = str1.substr(low, (high - low));
    	stringstream ss;
    	ss<<s;
    	ss>>d;
    	//cout<<d<<"\n";
    	//int d = stoi(s);
    	temp = (struct bigIntNode*)malloc(sizeof(struct bigIntNode));
    	temp->data = d;
    	temp->left = NULL;
    	temp->right = NULL;
    	if(head1 == NULL)
    	{
    		head1 = temp;
    		tail1 = temp;
    		temp1 = head1;
		}
		else
		{
			temp1->left = temp;
			temp->right = temp1;
			temp1 = temp1->left;
			tail1 = temp1;
		}
		low = low - 9;
		high = high - 9;
		i++;
	}while(i<n1);
	
	//Extraction of digits from string-2 and forming list-2
	low = l2-9; high = l2;
	i = 0;
	do
    {
    	if(low < 0)
    		low = 0;
    	string s = str2.substr(low, (high - low));
    	stringstream ss;
    	ss<<s;
    	ss>>d;
    	//cout<<d<<"\n";
    	//int d = stoi(s);
    	temp = (struct bigIntNode*)malloc(sizeof(struct bigIntNode));
    	temp->data = d;
    	temp->left = NULL;
    	temp->right = NULL;
    	if(head2 == NULL)
    	{
    		head2 = temp;
    		tail2 = temp;
    		temp2 = head2;
		}
		else
		{
			temp2->left = temp;
			temp->right = temp2;
			temp2 = temp2->left;
			tail2 = temp2;
		}
		low = low - 9;
		high = high - 9;
		i++;
	}while(i<n2);
	
	//Menu
    int choice;
    while(choice != 0)
    {
    	cout<<"\n\n press 1 for a+b\n press 2 for a-b\n press 0 to exit\n Enter your choice: ";
    	cin>>choice;
    
    	switch(choice)
    	{
    		case 1:
    			{
					cout<<"\n a + b = ";
    				addition();
    				break;
				}
			case 2:
				{
					cout<<"\n a - b = ";
					subtraction(n1,n2);
					break;
				}
		}	
	}
    
    return 0;
}

void addition()
{
	int carry=0;
	struct bigIntNode *temp1, *temp2, *temp3, *temp;
	
	temp3 = head3;
	
	temp1 = head1;
	temp2 = head2;
	
	while(temp1!=NULL && temp2!=NULL)
	{
		temp = (struct bigIntNode*)malloc(sizeof(struct bigIntNode));
		temp->data = (temp1->data + temp2->data + carry)%1000000000;
		temp->left = NULL;
		carry = (temp1->data + temp2->data + carry)/1000000000;

		if(temp3 == NULL)
		{
			temp->right = NULL;
			temp3 = temp;
			head3 = temp;	
		}
		else
		{
			temp->right = temp3;
			temp3->left = temp;
			temp3 = temp3->left;
		}
		
		temp1 = temp1->left;
		temp2 = temp2->left;
	}
	
	if(temp1==NULL)
	{
		while(temp2!=NULL)
		{
			temp = (struct bigIntNode*)malloc(sizeof(struct bigIntNode));
			temp->data = (temp2->data + carry)%1000000000;
			carry = (temp2->data + carry)/1000000000;

			temp->left = NULL;
			temp->right = temp3;
			temp3->left = temp;
			temp3 = temp3->left;

			temp2 = temp2->left;
		}
	}

	else
	{
		while(temp1!=NULL)
		{
			temp = (struct bigIntNode*)malloc(sizeof(struct bigIntNode));
			temp->data = (temp1->data + carry)%1000000000;
			carry = (temp1->data + carry)/1000000000;

			temp->left = NULL;
			temp->right = temp3;
			temp3->left = temp;
			temp3 = temp3->left;

			temp1 = temp1->left;
		}
	}
	
	if(carry!=0)
	{
		cout<<carry;	
	}	
	
	temp = temp3;
	while(temp!=NULL)
	{
		stringstream ss;
		ss<<temp->data;
		string s = ss.str();
		//cout<<s.length()<<"\n";
		if(temp->left==NULL && carry!=0 && s.length()<9)
		{
			while(s.length()!=9)
				s.insert(0,"0");
			cout<<s;
		}
		else if(temp->left!=NULL && s.length()<9)
		{
			while(s.length()!=9)
				s.insert(0,"0");
			cout<<s;
		}
		else
			cout<<temp->data;
	
		temp = temp->right;
	}
	deallocate();	
}

void subtraction(int n1, int n2)
{
	int borrow = 0, flag = 0;
	struct bigIntNode *temp1, *temp2, *temp3, *temp;
	
	temp3 = head3;

	if(n1 > n2)
		flag = 1;
	else if(n1 < n2)
		flag = -1;
	else
	{
		temp1 = tail1;
		temp2 = tail2;
		
		while((temp1!=NULL) && (temp1->data == temp2->data))
		{
			temp1 = temp1->right;
			temp2 = temp2->right;
		}

		if(temp1==NULL)
			flag = 0;
		else if(temp1->data > temp2->data)
			flag = 1;
		else if(temp1->data < temp2->data)
			flag = -1;
	}

	temp1 = head1;
	temp2 = head2;

	if(flag == 1)
	{
		while(temp2!=NULL)
		{
			temp = (struct bigIntNode*)malloc(sizeof(struct bigIntNode));
			if(temp1->data >= temp2->data)
			{
				temp->data = (temp1->data - temp2->data - borrow);
				borrow = 0;
			}
			else
			{
				temp->data = (1000000000+temp1->data) - temp2->data -borrow;
				borrow = 1;
			}

			temp->left = NULL;

			if(temp3 == NULL)
			{
				temp->right = NULL;
				temp3 = temp;
				head3 = temp;
			}
			else
			{
				temp->right = temp3;
				temp3->left = temp;
				temp3 = temp3->left;
			}

			temp1 = temp1->left;
			temp2 = temp2->left;
		}

		while(temp1!=NULL)
		{
			temp = (struct bigIntNode*)malloc(sizeof(bigIntNode));
			if(borrow > temp1->data)
			{
				temp->data = (1000000000 + temp1->data) - borrow;
				borrow = 1;
			}
			else
			{
				temp->data = temp1->data - borrow;
				borrow = 0;
			}

			temp->left = NULL;
			temp->right = temp3;
			temp3->left = temp;
			temp3 = temp3->left;

			temp1 = temp1->left;
		}
	}
	else if(flag == -1)
	{
		while(temp1!=NULL)
		{
			temp = (struct bigIntNode*)malloc(sizeof(struct bigIntNode));
			
			if(temp2->data >= temp1->data)
			{
				temp->data = temp2->data - temp1->data - borrow;
				borrow = 0;
			}
			else
			{
				temp->data = (1000000000+temp2->data) - temp1->data - borrow;
				borrow = 1;
			}

			temp->left = NULL;

			if(temp3 == NULL)
			{
				temp->right = NULL;
				temp3 = temp;
				head3 = temp;
			}
			else
			{
				temp->right = temp3;
				temp3->left = temp;
				temp3 = temp3->left;
			}

			temp1 = temp1->left;
			temp2 = temp2->left;
		}

		while(temp2!=NULL)
		{
			temp = (struct bigIntNode*)malloc(sizeof(bigIntNode));
			if(borrow > temp2->data)
			{
				temp->data = (1000000000+temp2->data) - borrow;
				borrow = 1;
			}
			else
			{
				temp->data = temp2->data - borrow;
				borrow = 0;
			}

			temp->left = NULL;
			temp->right = temp3;
			temp3->left = temp;
			temp3 = temp3->left;

			temp2 = temp2->left;
		}
	}
	
	if(flag == 0)
		cout<<"0";
	else
	{
		if(flag == -1)
			cout<<"-";
		
		int check = 0;
		temp = temp3;
		while(temp!=NULL)
		{
			stringstream ss;
			ss<<temp->data;
			string s = ss.str();

			if(temp->data == 0 && check==0)
			{
				temp = temp->right;
				continue;
			}
			else if(temp->data!=0 && check == 0)
			{
				check = 1;
				cout<<temp->data;
			}
			else
			{
				while(s.length()!=9)
					s.insert(0,"0");
				cout<<s;
			}
			
			temp = temp->right;
		}
	}
	deallocate();
}

void deallocate()
{
	struct bigIntNode * temp3, *temp;
	temp3 = head3;
	
	while(temp3!=NULL)
	{	
		temp = temp3;
		temp3 = temp3->left;
		delete temp;
	}	
	head3 = NULL;	
}